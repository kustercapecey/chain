package main

import (
    "fmt"
    "sync"
)

func generator(nums ...int) <-chan int {
    out := make(chan int)
    go func() {
        for _, n := range nums {
            out <- n
        }
        close(out)
    }()
    return out
}

func square(in <-chan int) <-chan int {
    out := make(chan int)
    go func() {
        for n := range in {
            out <- n * n
        }
        close(out)
    }()
    return out
}

func main() {
    var wg sync.WaitGroup
    in := generator(2, 3, 4, 5)
    out := square(in)
    wg.Add(1)
    go func() {
        defer wg.Done()
        for n := range out {
            fmt.Println(n)
        }
    }()
    wg.Wait()
}
